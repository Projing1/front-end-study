(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{206:function(t,a,s){t.exports=s.p+"assets/img/virtualDom.03014fb0.jpg"},207:function(t,a,s){t.exports=s.p+"assets/img/transition.3bf1e6e5.jpg"},208:function(t,a,s){t.exports=s.p+"assets/img/transitionclass.42b62dd9.jpg"},233:function(t,a,s){"use strict";s.r(a);var e=s(0),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"vue专题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue专题"}},[t._v("#")]),t._v(" Vue专题")]),t._v(" "),e("h2",{attrs:{id:"vue思想"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue思想"}},[t._v("#")]),t._v(" Vue思想")]),t._v(" "),e("ul",[e("li",[t._v("数据驱动。"),e("br"),t._v(" "),e("strong",[t._v("传统模式")]),t._v("：1、用ajax从服务端获取数据，然后操作DOM来改变视图，  当前端交互要改变数据时，需要重复一次上述步骤，而手动操作DOM的过程很繁琐，且容易出错；"),e("br"),t._v(" "),e("strong",[t._v("数据驱动-双向绑定")]),t._v("：Vue采用MVVM设计模式，M—Model表示模型（javascript对象），V—View 是文档模型DOM（UI界面），ViewModel 表示一个Vue实例对象；")]),t._v(" "),e("li",[t._v("组件化思想："),e("br"),t._v(" "),e("strong",[t._v("定义")]),t._v("：组件可以扩展HTML元素，封装可重用代码；组件是自定义元素，Vue.js的编译器为它添加特殊功能，组件也可以扩展原生的HTML元素；"),e("br"),t._v(" "),e("strong",[t._v("功能")]),t._v("：组件能够把页面抽象成多个相对独立的模块，实现代码重用，提高开发效率和代码质量，使得代码易于维护。")])]),t._v(" "),e("h2",{attrs:{id:"vue内部运行机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue内部运行机制"}},[t._v("#")]),t._v(" Vue内部运行机制")]),t._v(" "),e("ul",[e("li",[t._v("1）初始化 ：   new Vue() —init—> $mount ; 在new Vue（）之后，Vue会调用_init函数进行初始化，初始化生命周期，事件、props、methods、data、computed与watch等、其中最重要的是通过"),e("code",[t._v("Object.defineProperty")]),t._v("设置setter与getter函数，用来实现响应式以及依赖收集。 初始化之后，调用$mount会挂载组件。")]),t._v(" "),e("li",[t._v("2）编译：——>compile()、 parse、optimize、generate、render function；编译三部曲：parse（解析）：利用正则将模板转换成抽象语法树（AST）； optimize（标记静态节点做优化）：标记静态节点，以后update的时候，diff算法可以跳过静态节点； generate（转成字符串）：将抽象语法树（AST）转成字符串，供render去渲染DOM。")]),t._v(" "),e("li",[t._v("3）响应式：利用"),e("code",[t._v("Object.definePropety")]),t._v("设置data所返回对象，进行render function渲染时，读取data对象数据，触发getter函数，\n对data中的属性进行依赖收集，放到观察者watcher 观察队列中；\n修改data内属性会触发setter函数，通知观察者数据变化，观察者调用update更新视图。")]),t._v(" "),e("li",[t._v("4）虚拟DOM：render function 会被转换成虚拟DOM——实际是一个JS对象，从顶层DOM层层描述DOM，有tag，children，isStatic（代表是否为静态节点），isComment（代表是否为注释节点）等等许多属性来做DOM描述。")]),t._v(" "),e("li",[t._v("5）更新视图：数据变化后，执行render function可以得到一个新的VNode节点；得到新视图最简单粗暴的方法：直接解析新VNode节点，用innerHTML全部渲染到真实DOM中；update时，执行patch，传入新旧VNode，通过diff算法算出差异，局部更新视图，做到最优化。")])]),t._v(" "),e("h2",{attrs:{id:"列表渲染和条件渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#列表渲染和条件渲染"}},[t._v("#")]),t._v(" 列表渲染和条件渲染")]),t._v(" "),e("h3",{attrs:{id:"条件渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#条件渲染"}},[t._v("#")]),t._v(" 条件渲染")]),t._v(" "),e("p",[t._v("v-if、v-else-if、v-else/v-show")]),t._v(" "),e("ul",[e("li",[t._v("v-if、v-else-if、v-else/v-show与JavaScript的条件语句if 、else、else if类似。vue的条件指令可以根据表达式的值，在dOM中渲染或销毁元素/组件。")]),t._v(" "),e("li",[t._v("v-show不管初始条件是什么，元素总是会被渲染，并且只是简单地基于CSS进行显示隐藏切换。")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("v-if 使用场景")]),t._v(" "),e("th",[t._v("v-show 使用场景")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("运行条件较少改变，展示带权限列表，可以在template上使用")]),t._v(" "),e("td",[t._v("需要频繁切换（tab切换），展示前台页面数据，不可以在template上使用。")])])])]),t._v(" "),e("h3",{attrs:{id:"列表渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#列表渲染"}},[t._v("#")]),t._v(" 列表渲染")]),t._v(" "),e("p",[t._v("v-for\n当需要将一个数组遍历或枚举一个对象循环显示时，就会用到列表渲染指令v-for。 他的表达式需要结合 in 来使用，类似 item in items的形式。"),e("br"),t._v("\n我们定义一个数组类型的数据items，用v-for将"),e("code",[t._v("<li>")]),t._v(" 标签循环渲染，items是数据，item是当前数组元素的别名，循环出每个"),e("code",[t._v("<li>")]),t._v("内的元素都可以访问到对应的当前数据item，支持一个可选参数作为当前项的索引（index）。"),e("br"),t._v("\n列表渲染也支持用of 来替代in作为分隔符。"),e("br"),t._v("\neg：")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("\t"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("li v"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{item , index} in items"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\t\titem"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text\n\t"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("li"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("p",[t._v("v-for 也可以渲染对象；不同的地方是：item对应的是key-value的 value值。  渲染对象的时候：有三个参数：item（对象的值），name（对象的key）；index(对象的索引)；")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("使用v-for需要提供一个维护状态，为了给vue一个提示，以便能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一不可变更的Key属性。用于辨识vue的虚拟dom元素")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("\t"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("li v"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{item , index} in items"')]),t._v(" v"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"item.id"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("li"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("h4",{attrs:{id:"数组更新检测"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组更新检测"}},[t._v("#")]),t._v(" 数组更新检测")]),t._v(" "),e("ul",[e("li",[t._v("vue将被侦听的数组的变异方法进行了包裹，所以他们也将会触发视图更新，被包裹的方法有：push()/ pop()/shift()/unshift()/splice()/sort()/reverse();")]),t._v(" "),e("li",[t._v("当使用非变异方法时，可以用新数组替换旧数组，涉及方法有filter（）、concat() 和 slice();")]),t._v(" "),e("li",[t._v("两种情况不能监听： 当利用索引直接设置一个数组项时；当修改数组长度时。")])]),t._v(" "),e("h3",{attrs:{id:"显示过滤、排序的结果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#显示过滤、排序的结果"}},[t._v("#")]),t._v(" 显示过滤、排序的结果")]),t._v(" "),e("p",[t._v("如果想要显示一个数组经过过滤或排序后的版本，而不实际改变或重置原始数据，可以创建一个计算属性，来返回过滤排序后的数组。")]),t._v(" "),e("h3",{attrs:{id:"其他地方使用v-for"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他地方使用v-for"}},[t._v("#")]),t._v(" 其他地方使用v-for")]),t._v(" "),e("p",[t._v("组件上以及template上可以使用v-for；")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("注意事项："),e("br"),t._v("\n1、不推荐同时使用v-if和v-for 同时使用时，v-for具有比v-if更高的优先级；"),e("br"),t._v("\n2、列表渲染给每项加key，vue处于效率考虑，会尽可能地复用已有的元素而非重新渲染，加上key有助于优化性能。在vue2.2以后 如果不加key 会报错。")])]),t._v(" "),e("h2",{attrs:{id:"表单处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表单处理"}},[t._v("#")]),t._v(" 表单处理")]),t._v(" "),e("h3",{attrs:{id:"基础用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础用法"}},[t._v("#")]),t._v(" 基础用法")]),t._v(" "),e("p",[t._v("文本输入绑定：  v-model；")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input v"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("model"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("textarea v"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("model"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("textarea"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("h3",{attrs:{id:"绑定值："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#绑定值："}},[t._v("#")]),t._v(" 绑定值：")]),t._v(" "),e("p",[t._v("选择性框输入绑定值")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单选按钮")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"radio"')]),t._v(" id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one"')]),t._v(" v"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),t._v(" v"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("model"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pciked"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复选框")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"checkbox"')]),t._v(" id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"checkebox"')]),t._v(" v"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value1"')]),t._v(" v"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("fasle"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value2"')]),t._v(" v"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("model"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"checked"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下拉选择：")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("select"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("option disabled value"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("请选择"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("option"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("option v"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{number:123}"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("option"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("select"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("h3",{attrs:{id:"修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),e("ul",[e("li",[t._v("v-model.lazy :从input事件中转变为在change事件中同步数据；")]),t._v(" "),e("li",[t._v("v-model.number :可以将输入转换为Number类型")]),t._v(" "),e("li",[t._v("v-model.trim : 可以自动过滤输入时的首尾空格。")])]),t._v(" "),e("h2",{attrs:{id:"组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[t._v("#")]),t._v(" 组件")]),t._v(" "),e("h3",{attrs:{id:"组件基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件基础"}},[t._v("#")]),t._v(" 组件基础")]),t._v(" "),e("p",[t._v("为什么要使用组件：组件（component）是对数据和方法的简单封装，vue组件可以扩展HTML元素，提高重用性，让代码可复用。\n组件的使用：")]),t._v(" "),e("ul",[e("li",[t._v("组件命名：两种方式：1）使用kebab-case（短横线分隔命名）"),e("code",[t._v("<my-component>")]),t._v(" 2）使用PascalCase（首字母大写命名）")]),t._v(" "),e("li",[t._v("组件复用： 可以将组件进行任意次复用，每个组件都会独立维护它的实例数据。")]),t._v(" "),e("li",[t._v("组件注册： 两种方式：1）全局注册。2）局部注册。")])]),t._v(" "),e("h3",{attrs:{id:"组件间的数据传递"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件间的数据传递"}},[t._v("#")]),t._v(" 组件间的数据传递")]),t._v(" "),e("p",[t._v("使用prop向子组件传递数据")]),t._v(" "),e("ul",[e("li",[t._v("prop书写规则： 使用DOM中的模板时，驼峰命名的prop名需要使用其等价的短横线分割命名；")]),t._v(" "),e("li",[t._v("prop基本用法： 传递静态或动态的prop")]),t._v(" "),e("li",[t._v("传递特性： 所有的prop都使得其父子prop之间形成了一个单向下行绑定（单向数据流）；")])]),t._v(" "),e("p",[t._v("可以使用prop传递动态值给到子组件，直接在子组件的props的数组中增加名称。eg:")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("\t"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("my"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("component v"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("message"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("my"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("component"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在data里定义出message。")]),t._v("\n")])])]),e("p",[t._v("组件prop的数据验证：当组件需要提供别人使用时，推荐都进行数据验证；"),e("br"),t._v("\n验证的type类型可以是：String、Number、Boolean、Object、Array、Function、Symbol、Date，type也可以是一个自定义构造器，使用instanceof检测。"),e("br"),t._v("\n做数据验证以对象的形式写props，键为参数名，值为需要的验证方式。"),e("br"),t._v("\n当prop验证失败时，在开发版本下会在控制台抛出一条警告。")]),t._v(" "),e("h3",{attrs:{id:"自定义事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义事件"}},[t._v("#")]),t._v(" 自定义事件")]),t._v(" "),e("ul",[e("li",[t._v("使用场景： 当子组件需要向父组件传递数据时，就要用到自定义事件。")]),t._v(" "),e("li",[t._v("基本用法： 当子组件用$emit()来触发事件，父组件用$on()来监听子组件的事件。")]),t._v(" "),e("li",[t._v("自定义组件的v-model ：一个组件上的v-model默认会利用名为value的prop和名为input的事件。")]),t._v(" "),e("li",[t._v("将原生事件绑定到组件： 使用v-on的.native修饰符监听原生事件。")]),t._v(" "),e("li",[t._v(".sync修饰符：父组件监听自定义事件按需更新数据。\neg:自定义事件：实现一个具有双向绑定的v-model组件，要满足下面两个要求：")]),t._v(" "),e("li",[t._v("1、接收一个value属性；")]),t._v(" "),e("li",[t._v("2、在有新的value时触发input事件。")])]),t._v(" "),e("h2",{attrs:{id:"slot分发内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#slot分发内容"}},[t._v("#")]),t._v(" Slot分发内容")]),t._v(" "),e("p",[t._v("什么是Slot：")]),t._v(" "),e("ul",[e("li",[t._v("插槽（Slot） ： Vue提出来一个概念，插槽用于决定将所携带的内容，插入到指定的某个位置，从而使模板分块，具有模块化的特质和更大的重用性。")]),t._v(" "),e("li",[t._v("当需要让组件组合使用，混合父组件的内容与子组件的模板时，就会用到Slot。\n插销分类：")]),t._v(" "),e("li",[t._v("单个插槽： 在子组件内使用特殊"),e("code",[t._v("<Slot>")]),t._v("元素，就可以为这个子组件开启一个slot（插槽）；在父组件模板里，插入在子组件标签内的所有内容将替代子组件的"),e("code",[t._v("<slot>")]),t._v("标签及它的内容。")]),t._v(" "),e("li",[t._v("具名插槽： 给"),e("code",[t._v("<slot>")]),t._v("元素指定一个name后（在父组件中使用slot属性取名。在子组件中使用name命名），可以分发多个内容，具名slot可以与单个slot共存。")]),t._v(" "),e("li",[t._v("作用域插槽： 是一种特殊的slot 使用一个可以复用的模板替换已渲染元素。")])]),t._v(" "),e("h2",{attrs:{id:"单文件和自定义组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单文件和自定义组件"}},[t._v("#")]),t._v(" 单文件和自定义组件")]),t._v(" "),e("ul",[e("li",[t._v("单文件组件： 一个后缀名为.vue的文件，使用.vue文件需要先安装vue-loader 、vue-style-loader等加载器，并做webpack配置。因为要使用ES6语法，还需要安装配置babel和babel-loader等编译器。")]),t._v(" "),e("li",[t._v("自定义组件： 类似element-UI这类组件库，都是为了完成一些自定义或者特定业务的，这一类组件都可以称之为自定义组件。")])]),t._v(" "),e("h3",{attrs:{id:"单文件组件："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单文件组件："}},[t._v("#")]),t._v(" 单文件组件：")]),t._v(" "),e("p",[t._v("每个.vue 文件包含三种类型的顶级语言块————"),e("code",[t._v("<template> 、<script> 、<style>")]),t._v("还允许添加可选的自定义块。")]),t._v(" "),e("h3",{attrs:{id:"自定义组件简单写法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义组件简单写法"}},[t._v("#")]),t._v(" 自定义组件简单写法")]),t._v(" "),e("p",[t._v("创建一个文件夹，里面创建myComponent.vue和myComponent.js文件，在vue项目中入口文件main.js中或者需要使用的文件中，进行导入，使用vue.use();")]),t._v(" "),e("h3",{attrs:{id:"动态组件和异步组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动态组件和异步组件"}},[t._v("#")]),t._v(" 动态组件和异步组件")]),t._v(" "),e("ul",[e("li",[t._v("动态组件：vue.js提供了一个特殊元素"),e("code",[t._v("<component>")]),t._v("用来动态挂载不同的组件，使用is特性来选择要挂载的组件，这样的组件叫动态组件，另外可以使用"),e("code",[t._v("<keep-alive>")]),t._v("标签来使组件进行缓存。")]),t._v(" "),e("li",[t._v("异步组件： Vue.js允许将组件定义为一个工厂函数，动态的解析组件，Vue组件需要渲染时触发工厂函数，并且把结果缓存起来，用于后面的再次渲染，我们把这类组件称之为异步组件。")])]),t._v(" "),e("h2",{attrs:{id:"渲染函数及jsx语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染函数及jsx语法"}},[t._v("#")]),t._v(" 渲染函数及JSX语法")]),t._v(" "),e("h3",{attrs:{id:"渲染函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染函数"}},[t._v("#")]),t._v(" 渲染函数")]),t._v(" "),e("p",[t._v("渲染函数（render函数）")]),t._v(" "),e("ul",[e("li",[t._v("通过createElement函数来创建虚拟DOM（VirtualDom），这个虚拟DOM包含的信息会告诉Vue页面上需要渲染出什么元素。")]),t._v(" "),e("li",[t._v("可以解决有些场景中用template实现起来代码冗长繁琐，而且大量重复的问题。\n渲染函数解析：")]),t._v(" "),e("li",[t._v("render函数的返回值： VNode(即：虚拟节点)，也就是我们要渲染的节点。")]),t._v(" "),e("li",[t._v("render函数的参数 ： createElement是render函数的参数，它本身也是个函数，并且有三个参数，createElement函数的返回值也是VNode虚拟节点。第一个参数必选，可以是一个HTML标签，也可以是一个组件或函数；第二个是可选参数，数据对象，在template中使用，第三个是子节点，也是可选参数，用法一致。\n节点、树及虚拟DOM"),e("br"),t._v("\n概念：当浏览器读到一些DOm结构时，会建立一个“DOM节点”树来保持追踪所有内容，如同你会画一张家谱树来追踪家庭成员的发展一样，"),e("br"),t._v("\n虚拟DOM（VirtualDom）就是通过一种VNode（节点）类表达的，每个DOM元素或组件都对应一个VNode对象。"),e("br"),t._v("\n使用JavaScript对象模拟了Dom结构的树形结构，这个树结构包含整个DOM结构的信息。\n"),e("img",{attrs:{src:s(206),alt:"虚拟DOM运行原理"}})])]),t._v(" "),e("h4",{attrs:{id:"jsx语法及函数式组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsx语法及函数式组件"}},[t._v("#")]),t._v(" JSX语法及函数式组件")]),t._v(" "),e("p",[t._v("JSX语法：是JavaScript和XML结合的一种格式，最早是react发明了JSX，利用HTML语法来创建虚拟DOM。JSX执行更快，因为它再编译为Javascript代码后进行了优化。类型是安全的，在编译过程中就能发现错误，使用JSX编写模板更加简单快捷。  JSX语法需要babel插件转译为普通的HTML。")]),t._v(" "),e("h4",{attrs:{id:"函数式组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数式组件"}},[t._v("#")]),t._v(" 函数式组件")]),t._v(" "),e("p",[t._v("可以把函数式组件想象成组件里的一个函数，入参是渲染上下文（render context），返回值是渲染好的HTML，特性：1.Stateless（无状态）：组件自身是没有状态的。2、instanceless（无实例）：组件自身没有实例，也就是没有this。参数是靠context来传递的，context完整属性可参照官方文档查询。"),e("br"),t._v("\ncontext对象："),e("br"),t._v("\nprops：提供所有prop的对象；"),e("br"),t._v("\nchildren：VNode子节点的数组；"),e("br"),t._v("\nslots：一个函数，返回了包含所有插槽的对象。"),e("br"),t._v("\nscopedSlots：一个暴露传入的作用域插槽的对象，也以函数形式暴露普通插槽，"),e("br"),t._v("\ndata：传递给组件的整个数据对象，作为createElement的第二个参数传入组件"),e("br"),t._v("\nparent ：对父组件的引用；"),e("br"),t._v("\nlisteners ： 一个包含所有父组件为当前组件注册的时间监听器的对象，这是data.on的一个别名。\ninjections：如果使用了inject选项，则该对象包含了应当被注入的属性。")]),t._v(" "),e("h2",{attrs:{id:"vue过渡与动画"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue过渡与动画"}},[t._v("#")]),t._v(" Vue过渡与动画")]),t._v(" "),e("p",[t._v("Vue在插入、更新或者移除DOM时，提供多种不同方式的应用过渡效果。也提供了内置的过渡封装组件，该组件用于包裹要实现过渡效果的组件。\n"),e("img",{attrs:{src:s(207),alt:"过渡"}}),e("br"),t._v("\n过渡时会有6个类名在enter/leave的过渡中切换  ：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(208),alt:"过渡类的切换"}}),t._v(";")]),t._v(" "),e("h3",{attrs:{id:"钩子函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#钩子函数"}},[t._v("#")]),t._v(" 钩子函数")]),t._v(" "),e("p",[t._v("钩子函数可以结合CSS 的transitions /animations使用，也可以单独使用。"),e("br"),t._v("\n当只使用JavaScript过渡时，在enter和leave中必须使用done进行回调，否则，他们将被同步调用，过渡会立即完成。"),e("br"),t._v("\n初始渲染的过渡：可以通过appear特性设置节点在初始渲染的过渡。无论是appear特性还是v-on：appear钩子都会生成初始渲染过渡。"),e("br"),t._v("\n多个元素过渡：当有相同标签名的元素切换时，需要通过key特性设置唯一的值来标记以让vue区分它们，否则Vue为了效率只会替换相同标签内部的内容，即使在技术上没有必要，给在"),e("code",[t._v("<transition>")]),t._v("组件中的多个元素设置key是一个更好的实践。"),e("br"),t._v("\n多个组件的过渡：我们不需要key特性，我们只需要使用动态组件。"),e("br"),t._v("\n列表过渡：同时渲染整个列表，在这种场景中，使用"),e("code",[t._v("<transition-group>")]),t._v("组件。"),e("br"),t._v("\n可复用的过渡：过渡可以通过vue的组件系统实现复用。要创建一个可复用过渡组件，你需要做的是将"),e("code",[t._v("<transition>")]),t._v(" 或者 "),e("code",[t._v("transition-group")]),t._v("作为根组件。然后将任何组件放置在其中就可以了。"),e("br"),t._v("\n动态过渡：在Vue中即使是过渡也是数据驱动的，动态过渡最基本的例子是通过name特性来绑定动态值。所有过渡特性都可以动态绑定，还可以通过事件钩子获取上下文中的所有数据。"),e("br"),t._v("\n状态过度： 对于数据元素本身的动效，这些数据要么本身就以数值形式存储，要么可以转换为数值，有了这些数值后，我们就可以结合Vue的响应式和组件系统，使用第三方库来实现切换元素的过渡状态。")]),t._v(" "),e("h2",{attrs:{id:"生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),e("p",[t._v("生命周期钩子函数（Hook）在Vue中是一种事件劫持机制， 它会比定义的事件更早进行执行处理，而且可以让你自己去配置。"),e("br"),t._v(" "),e("em",[e("strong",[t._v("beforeCreate")])]),t._v(" ：实例创建前状态，el与data都为undefined"),e("br"),t._v(" "),e("em",[e("strong",[t._v("created")])]),t._v(" ：创建完毕状态，el为undefined，data里面已经有数据；数据请求一般写在这个里面。"),e("br"),t._v(" "),e("em",[e("strong",[t._v("beforeMount")])]),t._v(" ： 挂载前转态。el为undefined，data里面已经有数据；"),e("br"),t._v(" "),e("em",[e("strong",[t._v("mounted")])]),t._v(" ：挂载后状态，el与data都有相应的属性，第三方库一般在这个里面写。"),e("br"),t._v(" "),e("em",[e("strong",[t._v("beforeUpdate")])]),t._v(" ： 更新前状态，data里面的属性值改变，el:[object HTMLDivElement]"),e("br"),t._v(" "),e("em",[e("strong",[t._v("updated")])]),t._v(" : 更新完成状态，data里面的属性值改变，el:[object HTMLDivElement]"),e("br"),t._v(" "),e("em",[e("strong",[t._v("beforeDestory")])]),t._v(" ： 销毁前状态；"),e("br"),t._v(" "),e("em",[e("strong",[t._v("destoryed")])]),t._v(" ： 销毁状态。")]),t._v(" "),e("h2",{attrs:{id:"自定义指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义指令"}},[t._v("#")]),t._v(" 自定义指令")]),t._v(" "),e("p",[t._v("为什么要使用自定义指令。"),e("br"),t._v("\n在vue2中，代码复用和抽象的主要形式是组件，然而，有的情况下，我们仍然需要对普通DOM元素进行底层操作，这时候就会用到自定义指令。除了内置指令（v-if等）外，vue.js也允许注册自定义指令。"),e("br"),t._v("\n自定义指令提供一种机制将数据的变化映射为DOM行为。"),e("br"),t._v("\n可以用Vue。directive（id，definition）方法注册一个全局自定义指令，它接收两个参数指令ID与定义对象，也可以用组件的directive选项注册一个局部自定义指令。"),e("br"),t._v("\n自定义指令钩子函数：定义对象可以提供几个钩子函数："),e("br"),t._v("\nbind： 只调用一次，在指令第一次绑定到元素上时调用。\nupdate： 在bind之后立即以初始值为参数第一次调用，之后每当绑定值变化时调用，参数为新值与旧值。"),e("br"),t._v("\nupbind： 只调用一次，在指令从元素上解绑时调用。"),e("br"),t._v('\n动态指令参数：可以是动态的，例如，在v-mydirective:[argumenmt]= "value"中，argument参数可以根据组件实例数据进行更新！这使得自定义指令可以在应用中被灵活使用。')]),t._v(" "),e("h2",{attrs:{id:"vue-cli初识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-cli初识"}},[t._v("#")]),t._v(" vue cli初识")]),t._v(" "),e("p",[t._v("Vue-cli是vue的脚手架，是一个基于vue进行快速开发的完整系统，用于自动生成vue.js+webpack的项目模板，分为两种：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("vue init webpack-simple项目名")])]),t._v(" "),e("li",[e("code",[t._v("vue init webpack 项目名")]),e("br"),t._v("\nVue-cli 可以快速构建单页应用，但涉及内容很多，如webpack、npm、node.js等。"),e("br"),t._v(" "),e("em",[e("strong",[t._v("vue-cli系统包含的组件")])]),t._v("："),e("br"),t._v("\ncli是一个全局安装的npm 包，提供了终端的vue命令。"),e("br"),t._v("\ncli服务，它是一个npm包，局部安装在每个@vue/cli 创建的项目中。"),e("br"),t._v("\ncli插件 向你的vue项目提供可选功能的npm包，例如Babel/TypeScript转译、ESLint集成、单元测试和end-to-end测试等。")])]),t._v(" "),e("h3",{attrs:{id:"基于vue-cli快速构建——实战步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于vue-cli快速构建——实战步骤"}},[t._v("#")]),t._v(" 基于vue-cli快速构建——实战步骤")]),t._v(" "),e("p",[t._v("安装node.js —— 下载服务器框架 —— 实现一个静态服务器。"),e("br"),t._v("\ncli2生成的目录：")]),t._v(" "),e("ul",[e("li",[t._v("build ：里面是一些操作文件，使用npm run * 时其实执行的就是这里的文件；")]),t._v(" "),e("li",[t._v("config 配置文件，执行文件需要的配置信息；")]),t._v(" "),e("li",[t._v("src 资源文件，所有组件以及资源、页面入口文件等；")]),t._v(" "),e("li",[t._v("static 静态文件目录；")]),t._v(" "),e("li",[t._v("test ：测试文件目录；")]),t._v(" "),e("li",[t._v("index.html 入口文件； .babelrc : babel的配置文件，按照一定要求解析ES6的代码。  .editorconfig : 配置编辑器的相关内容，   .eslintrc.js配置eslint检测的内容。  package.json :项目描述文件，项目结构，需要什么依赖等。")])]),t._v(" "),e("p",[t._v("webpack：前端资源模块化管理和打包工具")]),t._v(" "),e("ul",[e("li",[t._v("可以将很多松散的模块，按依赖和规则打包成符合生产环境部署的前端资源；")]),t._v(" "),e("li",[t._v("可以将按需加载的模块进行代码分割，等实际需要的时候再异步加载。\n要自动实现上述功能，需要提前编辑好配置文件。")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("vue-cli脚手架工具用配置好的模板迅速搭建项目工程，省去自己配置webpack配置文件的基本内容。")])]),t._v(" "),e("p",[t._v("vue-cli生成项目的步骤："),e("br"),t._v("\n安装vue-cli ： npm install @vue/cli -g ;")]),t._v(" "),e("h2",{attrs:{id:"组件化深入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件化深入"}},[t._v("#")]),t._v(" 组件化深入")]),t._v(" "),e("h3",{attrs:{id:"组件化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件化"}},[t._v("#")]),t._v(" 组件化")]),t._v(" "),e("p",[t._v("组件是vue.js最强大的功能之一；")]),t._v(" "),e("ul",[e("li",[t._v("可以扩展HTML元素，封装可重用的代码；")]),t._v(" "),e("li",[t._v("在较高层面上是自定义元素，Vue.js的编译器为它添加特殊功能。")]),t._v(" "),e("li",[t._v("在有些情况下也可以是原生HTML元素形式，以is特性扩展。"),e("br"),t._v("\n组件创建：\n1、调用Vue.extend(),创建名为myComp的组件，template定义模板的标签，模板内容需要写在该标签下。")])]),t._v(" "),e("div",{staticClass:"language-vue extra-class"},[e("pre",{pre:!0,attrs:{class:"language-vue"}},[e("code",[t._v("var myComp = Vue.extend({\n\ttemplate:'"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("这是我的组件"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("'\n})\n")])])]),e("p",[t._v("2、template标签创建，需要加上id属性；")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("template id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myComp"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("这是templat构建的组件"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("template"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("p",[t._v('3、script标签创建，需要加id属性，同时还要加type="text/x-template" 不执行编译里面的代码；')]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text/x-template"')]),t._v(" id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myComp"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("这是script标签创建的组件。"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("h4",{attrs:{id:"组件注册"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件注册"}},[t._v("#")]),t._v(" 组件注册")]),t._v(" "),e("p",[t._v("1、调用Vue.extend()创建名为myComp的组件，再进行全局注册。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("Vue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("component")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my-comp'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("myComp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("2、template及script标签构建的组件全局注册。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("Vue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("component")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'my-comp'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ttemplate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#myComp'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("处理边界情况。"),e("br"),t._v("\n1、访问根实例：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取根组件的数据 获取到data里面的数据。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo \n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写入根组件的数据。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("2、访问父级组件：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$parrnt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("XXX")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),e("p",[t._v("3、访问子组件实例或子元素：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//通过ref特性为这个子组件赋予一个ID引用")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("base"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("input ref"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"usernameInput"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("base"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("inpt"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 访问usernameInput子组件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$refs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("usernameInput\n")])])]),e("p",[t._v("4、依赖注入")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("provide")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tgetMap "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getMap\n\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ninject "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'getMap'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("p",[t._v("5、程序化的时间侦听器：\n使用程序化的事件侦听器让多个输入框元素同时使用不同的Pikaday，每个新的实例都程序化地在后期清理它自己。")]),t._v(" "),e("h3",{attrs:{id:"混入基本用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#混入基本用法"}},[t._v("#")]),t._v(" 混入基本用法")]),t._v(" "),e("p",[t._v("混入提供了一种非常灵活的方式，来分发Vue组件中的可复用功能，一个混入对象可以包含任意组件选项，当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。"),e("br"),t._v("\nmixin全局混入："),e("br"),t._v("\n混入也可以进行全局注册，使用时格外小心，一旦使用全局混入，它将影响每个之后创建的Vue实例，使用恰当时，这可以用来为自定义选项注入处理逻辑。")]),t._v(" "),e("h2",{attrs:{id:"vuex的使用以及设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex的使用以及设计"}},[t._v("#")]),t._v(" Vuex的使用以及设计")]),t._v(" "),e("p",[t._v("vuex是一个专门为Vue.js应用程序开发的状态管理模式。"),e("br"),t._v("\n它采用集中式存储管理应用的所有组件的状态，并以相应的规则，保证状态以一种可预测的方式发生变化。")]),t._v(" "),e("ul",[e("li",[t._v("vuex默认的五种基本对象：")]),t._v(" "),e("li",[t._v("state: 存储状态（变量）；")]),t._v(" "),e("li",[t._v("getters： 对数据获取之前的再次编译，可以理解为state的计算属性；")]),t._v(" "),e("li",[t._v("mutations ：修改状态，并且是同步的，在组件中使用$store.commit('',params)。这个和我们组件中使用的自定义事件类似。")]),t._v(" "),e("li",[t._v("actions ： 异步操作，在组件中使用是$store.dispatch('');")]),t._v(" "),e("li",[t._v("module : store的子模块，为了开发大型项目，方便状态管理而使用的。")])]),t._v(" "),e("h3",{attrs:{id:"使用vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用vuex"}},[t._v("#")]),t._v(" 使用vuex")]),t._v(" "),e("p",[t._v("1、安装Vuex "),e("code",[t._v("npm install vuex --save")]),e("br"),t._v("\n2 引用vuex")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Vue "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue'")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Vuex "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vuex'")]),t._v("\nVue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Vuex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//要用use使用一下。 ")]),t._v("\n")])])]),e("p",[t._v("3、创建仓库store")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个store ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" store "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vuex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Store")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("store 对象包含四个子对象：")]),t._v(" "),e("ul",[e("li",[t._v("state ：用于存储数据，类似vue实例的data属性。")]),t._v(" "),e("li",[t._v("mutations ：唯一修改state的方法，修改过程是同步的。")]),t._v(" "),e("li",[t._v("actions：发出事件，事件监听程序一般会调用mutations对state进行修改，action事件本身是异步的，提交的是mutation，而不是直接变更状态。")]),t._v(" "),e("li",[t._v("getter：用于对state的数据进行筛选，过滤。")])]),t._v(" "),e("p",[t._v("vuex的设计思想："),e("br"),t._v("\nvuex 使用单一状态树，用一个对象State包含了整个应用层级的所有状态，你可以理解为这些状态就是一堆全局变量和数据。"),e("br"),t._v("\n简而言之 Vuex采用类似全局对象的形式来管理所有组件的公用数据，如果想修改这个全局对象的数据，得按照Vuex提供的方式来修改（不能随意用自己的方式来修改）；")]),t._v(" "),e("h2",{attrs:{id:"vue-router"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-router"}},[t._v("#")]),t._v(" vue-router")]),t._v(" "),e("p",[t._v("什么是路由：")]),t._v(" "),e("h2",{attrs:{id:"vue组件通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue组件通信"}},[t._v("#")]),t._v(" Vue组件通信")]),t._v(" "),e("h3",{attrs:{id:"组件通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件通信"}},[t._v("#")]),t._v(" 组件通信")]),t._v(" "),e("p",[t._v("什么是组件通信：实际上指各个组件间，进行参数或者信息的相互传递，每个组件都是一个独立功能的整体，当我们要将这些组件拼接在一起时，就需要在这些组件之间建立通信。"),e("br"),t._v("\n组件通信的几种类型：")]),t._v(" "),e("ul",[e("li",[t._v("父子组件通信：1、使用props和$emit父子组件相互通信，2、父组件$children操作子组件。 3、子组件$parent访问父组件。")]),t._v(" "),e("li",[t._v("非父子组件通信： 1、使用中央事件总线（eventbus）来处理非父子组件间的通信，2、祖先元素通过provide提供数据，后代通过inject获取该数据。3、使用$attrs和$listeners实现祖孙组件通信。4、$root直接访问根组件。")])]),t._v(" "),e("h2",{attrs:{id:"自定义插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义插件"}},[t._v("#")]),t._v(" 自定义插件")]),t._v(" "),e("h3",{attrs:{id:"插件的作用及原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#插件的作用及原理"}},[t._v("#")]),t._v(" 插件的作用及原理")]),t._v(" "),e("ul",[e("li",[t._v("代码复用，功能扩展；")]),t._v(" "),e("li",[t._v("Vue提供了插件机制，可以在全局添加一些功能，它们可以简单到几个方法，属性，也可以很复杂，比如一整套组件库，如elementUI。")])]),t._v(" "),e("h3",{attrs:{id:"自定义插件的封装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义插件的封装"}},[t._v("#")]),t._v(" 自定义插件的封装")]),t._v(" "),e("p",[t._v("插件用法：Vue.use(MyPlugin) 本质上是调用MyPlugin.install(Vue);"),e("br"),t._v("\n使用插件必须在new Vue() 启动应用之前完成，实例化之前就要配置好，"),e("br"),t._v("\n如果使用Vue.use多次注册相同插件，那只会注册成功一次。")]),t._v(" "),e("h4",{attrs:{id:"数据校验插件需求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据校验插件需求"}},[t._v("#")]),t._v(" 数据校验插件需求")]),t._v(" "),e("p",[t._v("需求内容：1、处理自定义rules规则，2、这个rules需要一个对象；3、该对象指定组件中的数据的验证规则。")]),t._v(" "),e("h2",{attrs:{id:"单元测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[t._v("#")]),t._v(" 单元测试")]),t._v(" "),e("h3",{attrs:{id:"什么是单元测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是单元测试"}},[t._v("#")]),t._v(" 什么是单元测试")]),t._v(" "),e("ul",[e("li",[t._v("针对程序的最小单元来进行正确性检验的测试工作")]),t._v(" "),e("li",[t._v("通俗的讲是为了测试某一个类或某一个方法能都正常工作，而写的测试代码。"),e("br"),t._v("\n单元测试作用： 减少bug，提高代码质量，快速定位bug，减少调试时间，放心重构。")])]),t._v(" "),e("h3",{attrs:{id:"如何进行单元测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何进行单元测试"}},[t._v("#")]),t._v(" 如何进行单元测试")]),t._v(" "),e("p",[t._v("TDD： 测试驱动开发"),e("br"),t._v("\nBDD： 行为驱动开发"),e("br"),t._v("\n单元测试常用工具："),e("br"),t._v("\nMocha 一个JavaScript测试框架，就是运行测试的工具；"),e("br"),t._v("\nChai 一个Mocha可以使用的断言库，判断源码的实际执行结果与预期结果一致。"),e("br"),t._v("\nVue Test Utils 是Vue.js官方的单元测试实用工具库"),e("br"),t._v("\nsupertest 代理HTTP请求。")]),t._v(" "),e("h2",{attrs:{id:"vue编译器解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue编译器解析"}},[t._v("#")]),t._v(" vue编译器解析")]),t._v(" "),e("p",[t._v("template ---\x3e parse(解析出类型，tag标签，子节点等各种内容，) ---\x3e  optimize(标注静态节点) ----\x3e  generate(解析节点然后交给渲染函数render，生成VNode) ---\x3e _updata(render())(两个分支：分支1，首次渲染initial render 映射成真正的DOM， 分支2：数据更新，新旧VNode的对比，以及diff算法，)")])])}),[],!1,null,null,null);a.default=r.exports}}]);